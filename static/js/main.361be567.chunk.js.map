{"version":3,"sources":["components/Animations/welcome.svg","components/Animations/tictactoe.svg","components/Animations/accounts.svg","components/Animations/cities.svg","components/Animations/link.svg","components/Animations/settings.svg","components/DefaultApp/logo.svg","components/Animations/svgComponent.js","components/Tictactoe/tictactoe.js","components/DefaultApp/DefaultApp.js","components/Accounts/accountFunctions.js","components/Accounts/CreateAccForm.js","components/Accounts/AccDisplays.js","components/Accounts/AccountCard.js","components/Accounts/Account.js","components/City/MsgDisplay.js","components/City/AddCityForm.js","components/City/CommDisplay.js","components/City/cityFunctions.js","components/City/cityFetch.js","components/City/CityCard.js","components/City/City.js","components/Lists/LinkedListFunctions.js","components/Lists/LinkedListApp.js","components/Theme/ThemeSettings.js","components/Theme/ThemeContext.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Animation","props","id","className","src","welcome","alt","onMouseOver","mouseOverEvent","onMouseLeave","mouseOutEvent","onClick","ButtonClicked","tictactoe","accounts","cities","link","settings","Square","highlight","value","Board","i","winLine","this","key","squares","includes","row","j","push","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","winner","line","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","latestMove","step","status","current","winnerInfo","moves","map","move","col","Math","floor","desc","jumpTo","handleClick","DefaultApp","Fragment","myState","logo","href","target","rel","Account","accountName","AccBalance","depositAmount","withAmount","AccountController","accOwner","_accountList","WeakMap","set","accountHolder","newAcc","initBalance","accName","newAccHolder","filter","arr","num","getAccBalances","reduce","acc","curVal","max","min","CreateAccForm","accountController","accBalance","handleOnChange","bind","handleOnSubmit","event","name","preventDefault","onSubmit","htmlFor","type","placeholder","onChange","AccDisplays","highestVAcc","lowestVAcc","netWorth","message","AccountCard","handleDepositButton","Number","amount","accountCard","deposit","updatedDepositCard","cardErrorMessage","updateAccCard","handleWithdrawButton","withdrawnAmount","withdraw","updatedWithdrawCard","handleDeleteButton","deleteAccCard","cardName","updatedCard","handleFormChange","AccountComp","addReactAccount","params","nameExists","item","errorMessage","addAccount","console","log","updateAccounts","deleteReactAccount","removeAccount","highestAcc","lowestAcc","totalBalance","document","getElementById","classList","remove","highestAccountUpdate","highestValAcc","lowestAccountUpdate","lowestValAcc","totalBalanceUpdate","totalAccBalance","add","addAccountCard","account","card","MsgDisplay","AddCityForm","cityName","latitude","longitude","population","handleFormSubmit","CommDisplay","mostNorthernCity","mostSouthernCity","commPopulation","City","numValue","Community","cityRoster","newCity","city","cityList","sort","sum","cityKey","newCityRoster","url","cityFetchFunctions","postData","data","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","response","json","statusText","postToServer","updateServer","currentCity","deleteFromServer","getCitiesOnServer","newComm","keyArrays","itm","lastKey","clearServer","CityCard","handleMovedInButton","movedInAmount","cardInput","cityCard","movedIn","updatedMovedInCard","updateCityCard","showCitySize","handleMovedOutButton","movedOutAmount","movedOut","updatedMovedOutCard","howBig","citySize","deleteCityCard","cardKey","handleCardInput","addReactCity","cityCounter","keyCounter","cityController","createCity","newState","updateCities","deleteReactCity","keyIndex","deleteCity","northMost","southMost","totalPopulation","northMostCity","getMostNorthern","southMostCity","getMostSouthern","communityPopulation","getPopulation","addCityCard","serverDisplayMessage","cityCount","ListNode","subject","forwardNode","myLinkedList","first","head","last","next","previous","previousNode","insert","newNode","delete","sumAmounts","node","LinkedListApp","useState","setSubject","setAmount","setCurrent","handleInsert","listNodes","displayText","total","counter","onKeyPress","keyCode","show","ThemeApp","DropdownButton","title","Dropdown","Item","ThemeContext","createContext","dark","toggle","App","evt","onMouseOut","onButtonClick","currentIcon","Boolean","window","location","hostname","match","ReactDOM","render","setDark","Provider","localStorage","setItem","children","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.361be567.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/welcome.c8ecb422.svg\";","module.exports = __webpack_public_path__ + \"static/media/tictactoe.348ca21b.svg\";","module.exports = __webpack_public_path__ + \"static/media/accounts.37db4ad6.svg\";","module.exports = __webpack_public_path__ + \"static/media/cities.481f3486.svg\";","module.exports = __webpack_public_path__ + \"static/media/link.6ccfdef6.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.b165e1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport welcome from \"./welcome.svg\";\r\nimport tictactoe from \"./tictactoe.svg\";\r\nimport accounts from \"./accounts.svg\";\r\nimport cities from \"./cities.svg\";\r\nimport link from \"./link.svg\";\r\nimport settings from \"./settings.svg\";\r\nimport \"./svgComponent.css\";\r\n\r\nconst Animation = props => {\r\n  return (\r\n    <div id=\"Header\" className=\"Navigation\">\r\n      <img\r\n        id=\"Home\"\r\n        src={welcome}\r\n        className=\"svg-image animate\"\r\n        alt=\"svg1\"\r\n        onMouseOver={props.mouseOverEvent}\r\n        onMouseLeave={props.mouseOutEvent}\r\n        onClick={props.ButtonClicked}\r\n      />\r\n      <img\r\n        id=\"Tictactoe\"\r\n        src={tictactoe}\r\n        className=\"svg-image animate1\"\r\n        alt=\"svg2\"\r\n        onMouseOver={props.mouseOverEvent}\r\n        onMouseLeave={props.mouseOutEvent}\r\n        onClick={props.ButtonClicked}\r\n      />\r\n      <img\r\n        id=\"Accounts\"\r\n        src={accounts}\r\n        className=\"svg-image animate2\"\r\n        alt=\"svg3\"\r\n        onMouseOver={props.mouseOverEvent}\r\n        onMouseLeave={props.mouseOutEvent}\r\n        onClick={props.ButtonClicked}\r\n      />\r\n      <img\r\n        id=\"Cities\"\r\n        src={cities}\r\n        className=\"svg-image animate3\"\r\n        alt=\"svg4\"\r\n        onMouseOver={props.mouseOverEvent}\r\n        onMouseLeave={props.mouseOutEvent}\r\n        onClick={props.ButtonClicked}\r\n      />\r\n      <img\r\n        id=\"Lists\"\r\n        src={link}\r\n        className=\"svg-image animate1\"\r\n        alt=\"svg5\"\r\n        onMouseOver={props.mouseOverEvent}\r\n        onMouseLeave={props.mouseOutEvent}\r\n        onClick={props.ButtonClicked}\r\n      />\r\n      <img\r\n        id=\"Settings\"\r\n        src={settings}\r\n        className=\"svg-image animate2\"\r\n        alt=\"svg6\"\r\n        onMouseOver={props.mouseOverEvent}\r\n        onMouseLeave={props.mouseOutEvent}\r\n        onClick={props.ButtonClicked}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Animation;\r\n","import React from \"react\";\r\nimport \"./tictactoe.css\";\r\n\r\nfunction Square(props) {\r\n  const className = \"square\" + (props.highlight ? \" highlight\" : \"\");\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winLine = this.props.winLine;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        highlight={winLine && winLine.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for (let i = 0; i < boardSize; ++i) {\r\n      let row = [];\r\n      for (let j = 0; j < boardSize; ++j) {\r\n        row.push(this.renderSquare(i * boardSize + j));\r\n      }\r\n      squares.push(\r\n        <div key={i} className=\"board-row\">\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>{squares}</div>\r\n      // <div>\r\n      //   <div className=\"board-row\">\r\n      //     {this.renderSquare(0)}\r\n      //     {this.renderSquare(1)}\r\n      //     {this.renderSquare(2)}\r\n      //   </div>\r\n      //   <div className=\"board-row\">\r\n      //     {this.renderSquare(3)}\r\n      //     {this.renderSquare(4)}\r\n      //     {this.renderSquare(5)}\r\n      //   </div>\r\n      //   <div className=\"board-row\">\r\n      //     {this.renderSquare(6)}\r\n      //     {this.renderSquare(7)}\r\n      //     {this.renderSquare(8)}\r\n      //   </div>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0, //Indicated which state we are currently viewing\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice(); //creates a new copy of squares array after every move\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([{ squares: squares, latestMove: i }]),\r\n      stepNumber: history.length, //ensure we don't get stuck showing the same move after a new move has been made\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0 //sets xIsNext to true if the number we are changing stepNumber to is even\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winnerInfo = calculateWinner(current.squares);\r\n    // console.log(winnerInfo);\r\n    const winner = winnerInfo.winner;\r\n\r\n    const moves = history.map((step, move) => {\r\n      const latestMove = step.latestMove;\r\n      const col = 1 + (latestMove % 3);\r\n      const row = 1 + Math.floor(latestMove / 3);\r\n      const desc = move\r\n        ? \"Go to move #\" + move + \" (\" + col + \",\" + row + \")\"\r\n        : \"Go to game start/Restart\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === this.state.stepNumber ? \"selected-move\" : \"\"}\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner && winner !== \"draw\") {\r\n      status = \"Winner: \" + winner;\r\n    } else if (winner && winner === \"draw\") {\r\n      status = \"We have a \" + winner;\r\n    } else {\r\n      status = \"Next Player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        {/* <div className=\"game-options\">\r\n          <button>Start First</button>\r\n          <button>Start Second</button>\r\n          <button>Easy </button>\r\n          <button>Hard</button>\r\n        </div> */}\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            winLine={winnerInfo.line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol> {moves} </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Needs some explanation\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { winner: squares[a], line: lines[i] };\r\n    } else if (!squares.includes(null)) {\r\n      return { winner: \"draw\" };\r\n    }\r\n  }\r\n  return { winner: null, line: null };\r\n}\r\n\r\nexport default Game;\r\nexport { Square, Board };\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\n// import App from \"../App.js\";\r\n\r\nconst DefaultApp = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <p id=\"hoverStatus\">{props.myState}</p>\r\n      <img src={logo} className=\"App-logo animate\" alt=\"logo\"></img>\r\n      <p>\r\n        Edit <code>src/App.js</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Learn React\r\n      </a>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DefaultApp;\r\n","export class Account {\r\n  constructor(accountName, AccBalance) {\r\n    this.accountName = accountName;\r\n    this.AccBalance = AccBalance;\r\n  }\r\n\r\n  deposit(depositAmount) {\r\n    if (depositAmount <= 0) {\r\n      return this.AccBalance;\r\n    }\r\n    this.AccBalance += depositAmount;\r\n    //return this.AccBalance;\r\n  }\r\n\r\n  withdraw(withAmount) {\r\n    if (withAmount > this.AccBalance) {\r\n      return this.AccBalance;\r\n    }\r\n    this.AccBalance -= withAmount;\r\n    // return this.AccBalance;\r\n  }\r\n\r\n  balance() {\r\n    return this.AccBalance;\r\n  }\r\n}\r\n\r\nexport class AccountController {\r\n  constructor(accOwner) {\r\n    const _accountList = new WeakMap();\r\n    _accountList.set(this, _accountList);\r\n    this.accOwner = accOwner;\r\n    this.accountHolder = [];\r\n  }\r\n  accountList() {\r\n    return this.accountHolder;\r\n  }\r\n\r\n  addAccount(newAcc, initBalance) {\r\n    this.accountHolder.push(new Account(newAcc, initBalance));\r\n    // return this.accountHolder;\r\n  }\r\n  removeAccount(accName) {\r\n    let newAccHolder = this.accountHolder.filter(function(value) {\r\n      return value.accountName !== accName;\r\n    });\r\n    this.accountHolder = newAccHolder;\r\n    // return this.accountHolder;\r\n  }\r\n  getAccBalances(arr) {\r\n    let newArray = arr.map(num => {\r\n      return num.AccBalance;\r\n    });\r\n    return newArray;\r\n  }\r\n  totalAccBalance(arr) {\r\n    let newArray = this.getAccBalances(arr);\r\n    let totalBalance = newArray.reduce((acc, curVal) => {\r\n      return acc + curVal;\r\n    });\r\n    return totalBalance;\r\n  }\r\n  highestValAcc(arr) {\r\n    let newArray = this.getAccBalances(arr);\r\n    let highestVal = newArray.reduce((a, b) => {\r\n      return Math.max(a, b);\r\n    });\r\n    return highestVal;\r\n  }\r\n  lowestValAcc(arr) {\r\n    let newArray = this.getAccBalances(arr);\r\n    let lowestVal = newArray.reduce((a, b) => {\r\n      return Math.min(a, b);\r\n    });\r\n    return lowestVal;\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport \"./Account.css\";\r\nimport { AccountController } from \"./accountFunctions\";\r\n\r\nclass CreateAccForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accountController: new AccountController(),\r\n      accName: \"\",\r\n      accBalance: \"\"\r\n    };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n  }\r\n\r\n  handleOnChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleOnSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.setState({ accName: \"\", accBalance: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h4 className=\"panelTitle\">Account Summary</h4>\r\n        <form>\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"accountName\" className=\"col-sm-4 col-form-label\">\r\n              Account Name:\r\n            </label>\r\n            <div className=\"col-sm-8\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"accountName\"\r\n                name=\"accName\"\r\n                placeholder=\"Enter Account Name\"\r\n                value={this.state.accName}\r\n                onChange={this.handleOnChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"initBalance\" className=\"col-sm-4 col-form-label\">\r\n              Opening Balance:\r\n            </label>\r\n            <div className=\"col-sm-8\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                id=\"initialBalance\"\r\n                name=\"accBalance\"\r\n                placeholder=\"Enter Opening Balance\"\r\n                value={this.state.accBalance}\r\n                onChange={this.handleOnChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-sm-12\">\r\n              <button\r\n                id=\"newAccount\"\r\n                type=\"submit\"\r\n                className=\"btn btn-primary\"\r\n                onClick={this.handleOnSubmit}\r\n              >\r\n                Create New Account\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateAccForm;\r\n","import React from \"react\";\r\nimport \"./Account.css\";\r\n\r\nfunction AccDisplays(props) {\r\n  return (\r\n    <div>\r\n      <div id=\"accOptions\" className=\"hide\">\r\n        <h5 className=\"panelTitle text-center\">Account Details</h5>\r\n\r\n        <label className=\"accDetailsLabel\">Highest Value Account:</label>\r\n        <span className=\"accDetailsValue\"> ${props.highestVAcc}</span>\r\n        <br />\r\n        <label className=\"accDetailsLabel\">Lowest Value Account:</label>\r\n        <span className=\"accDetailsValue\"> ${props.lowestVAcc}</span>\r\n        <br />\r\n        <label className=\"accDetailsLabel\">Total Balance of Accounts:</label>\r\n        <span className=\"accDetailsValue\"> ${props.netWorth}</span>\r\n        <hr></hr>\r\n      </div>\r\n      <div id=\"messageArea\">\r\n        <h5 className=\"panelTitle text-center\">Message Area</h5>\r\n        <p id=\"resultDisplay\"></p>\r\n        <p id=\"errorDisplay\" className=\"error\">\r\n          {props.message}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccDisplays;\r\n","import React, { Fragment } from \"react\";\r\n\r\nclass AccountCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accountCard: this.props.accountCard,\r\n      amount: \" \",\r\n      cardErrorMessage: \" \"\r\n    };\r\n    this.handleFormChange = this.handleFormChange.bind(this);\r\n  }\r\n\r\n  handleFormChange(event) {\r\n    this.setState({ amount: event.target.value });\r\n  }\r\n\r\n  handleDepositButton = event => {\r\n    event.preventDefault(event);\r\n    let depositAmount = Number(this.state.amount);\r\n    if (depositAmount > 0) {\r\n      this.state.accountCard.deposit(depositAmount);\r\n      const updatedDepositCard = this.state.accountCard;\r\n      this.setState({\r\n        accountCard: updatedDepositCard,\r\n        amount: \"\",\r\n        cardErrorMessage: \"\"\r\n      });\r\n      this.props.updateAccCard();\r\n    } else {\r\n      this.setState({\r\n        cardErrorMessage: \"Enter Positive Dollar Amount\"\r\n      });\r\n    }\r\n  };\r\n\r\n  handleWithdrawButton = event => {\r\n    event.preventDefault(event);\r\n    let withdrawnAmount = Number(this.state.amount);\r\n    if (withdrawnAmount > 0) {\r\n      if (withdrawnAmount <= this.state.accountCard.AccBalance) {\r\n        this.state.accountCard.withdraw(withdrawnAmount);\r\n        const updatedWithdrawCard = this.state.accountCard;\r\n        this.setState({\r\n          accountCard: updatedWithdrawCard,\r\n          amount: \" \",\r\n          cardErrorMessage: \" \"\r\n        });\r\n        this.props.updateAccCard();\r\n      } else {\r\n        this.setState({\r\n          cardErrorMessage: \"Insufficient Funds\"\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        cardErrorMessage: \"Enter Positive Dollar Amount\"\r\n      });\r\n    }\r\n  };\r\n\r\n  handleDeleteButton = () => {\r\n    this.props.deleteAccCard(this.props.cardName);\r\n    const updatedCard = this.state.accountCard;\r\n    this.setState({\r\n      accountCard: updatedCard\r\n    });\r\n    this.props.updateAccCard();\r\n  };\r\n\r\n  render() {\r\n    let { accountName, AccBalance } = this.state.accountCard;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"card\">\r\n          <div className=\"card-header accTitle\">{accountName}</div>\r\n          <div className=\"card-body\">\r\n            <div className=\"spacerBottom\">\r\n              <input\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Positive Dollar Amount\"\r\n                type=\"number\"\r\n                onChange={this.handleFormChange}\r\n                value={this.state.amount}\r\n              />\r\n            </div>\r\n            <button\r\n              className=\"deposit btn btn-outline-primary\"\r\n              onClick={this.handleDepositButton}\r\n            >\r\n              Deposit\r\n            </button>\r\n            <button\r\n              className=\"withdraw btn btn-outline-primary\"\r\n              onClick={this.handleWithdrawButton}\r\n            >\r\n              Withdraw\r\n            </button>\r\n            <button\r\n              className=\"deleteCardBtn btn btn-outline-danger\"\r\n              onClick={this.handleDeleteButton}\r\n            >\r\n              Delete\r\n            </button>\r\n            <div className=\"spacerTop effectiveBalance\">\r\n              Effective Balance: ${AccBalance}\r\n            </div>\r\n            <div className=\"error spacerTop\">{this.state.cardErrorMessage}</div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountCard;\r\n","import React from \"react\";\r\nimport \"./Account.css\";\r\nimport CreateAccForm from \"./CreateAccForm\";\r\nimport AccDisplays from \"./AccDisplays\";\r\nimport { AccountController } from \"./accountFunctions\";\r\nimport AccountCard from \"./AccountCard\";\r\n\r\nclass AccountComp extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      highestAcc: 0,\r\n      lowestAcc: 0,\r\n      totalBalance: 0,\r\n      errorMessage: \"\"\r\n    };\r\n    this.accountController = new AccountController();\r\n  }\r\n\r\n  addReactAccount = params => {\r\n    const { accName, accBalance } = params;\r\n    let nameArray = this.accountController.accountHolder;\r\n    let accNames = nameArray.map(item => item.accountName);\r\n    let nameExists = accNames.includes(accName);\r\n\r\n    if (accName === \"\" || nameExists === true) {\r\n      this.setState({\r\n        errorMessage: \"Please enter a unique name for your account\"\r\n      });\r\n    } else {\r\n      this.accountController.addAccount(accName, Number(accBalance));\r\n      console.log(this.accountController.accountHolder);\r\n      this.updateAccounts();\r\n      this.setState({\r\n        errorMessage: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  deleteReactAccount = name => {\r\n    this.accountController.removeAccount(name);\r\n    console.log(this.accountController.accountHolder);\r\n    this.updateAccounts();\r\n  };\r\n\r\n  updateAccounts = () => {\r\n    if (this.accountController.accountHolder.length < 1) {\r\n      this.setState({ highestAcc: 0, lowestAcc: 0, totalBalance: 0 });\r\n      document.getElementById(\"accOptions\").classList.remove(\"unhide\");\r\n      return;\r\n    }\r\n    const highestAccountUpdate = this.accountController.highestValAcc(\r\n      this.accountController.accountHolder\r\n    );\r\n    const lowestAccountUpdate = this.accountController.lowestValAcc(\r\n      this.accountController.accountHolder\r\n    );\r\n    const totalBalanceUpdate = this.accountController.totalAccBalance(\r\n      this.accountController.accountHolder\r\n    );\r\n    this.setState({\r\n      highestAcc: highestAccountUpdate,\r\n      lowestAcc: lowestAccountUpdate,\r\n      totalBalance: totalBalanceUpdate\r\n    });\r\n    document.getElementById(\"accOptions\").classList.add(\"unhide\");\r\n  };\r\n\r\n  addAccountCard = () => {\r\n    return this.accountController.accountHolder.map(account => {\r\n      return (\r\n        <AccountCard\r\n          key={account.accountName}\r\n          accountCard={account}\r\n          deleteAccCard={this.deleteReactAccount}\r\n          updateAccCard={this.updateAccounts}\r\n          cardName={account.accountName}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const card = this.addAccountCard();\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"spacer\">Welcome to Accounts Dashboard</h1>\r\n        <div id=\"wrapper\" className=\"container\">\r\n          <div className=\"row row-grid\">\r\n            <div className=\"col-md-6\">\r\n              <div id=\"leftPanel\" className=\"col-md-12\">\r\n                <h4 className=\"panelTitle\">Accounts</h4>\r\n                {card}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div id=\"rightPanel\" className=\"col-md-12\">\r\n                <CreateAccForm onSubmit={this.addReactAccount} />\r\n                <hr></hr>\r\n                <AccDisplays\r\n                  highestVAcc={this.state.highestAcc}\r\n                  lowestVAcc={this.state.lowestAcc}\r\n                  netWorth={this.state.totalBalance}\r\n                  message={this.state.errorMessage}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountComp;\r\n","import React from \"react\";\r\nimport \"../Accounts/Account.css\";\r\nimport \"./City.css\";\r\n\r\nfunction MsgDisplay(props) {\r\n  return (\r\n    <div id=\"messageArea\">\r\n      <h5 className=\"panelTitle text-center\">Message Area</h5>\r\n      <p id=\"resultDisplay\">{props.message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MsgDisplay;\r\n","import React, { Fragment } from \"react\";\r\nimport \"../Accounts/Account.css\";\r\nimport \"./City.css\";\r\n\r\nclass AddCityForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cityName: \" \",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n      population: \"\"\r\n    };\r\n\r\n    this.handleFormChange = this.handleFormChange.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n  }\r\n\r\n  handleFormChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.setState({\r\n      cityName: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n      population: \"\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h5 className=\"panelTitle\">Build Community</h5>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"cityName\" className=\"col-sm-4 col-form-label\">\r\n            City Name:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              onChange={this.handleFormChange}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"cityName\"\r\n              placeholder=\"Enter New City Name\"\r\n              name=\"cityName\"\r\n              value={this.state.cityName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"latitudeInput\" className=\"col-sm-4 col-form-label\">\r\n            Latitude:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              onChange={this.handleFormChange}\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              id=\"latitudeInput\"\r\n              placeholder=\"Enter Latitude\"\r\n              name=\"latitude\"\r\n              value={this.state.latitude}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"longitudeInput\" className=\"col-sm-4 col-form-label\">\r\n            Longitude:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              onChange={this.handleFormChange}\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              id=\"longitudeInput\"\r\n              placeholder=\"Enter Longitude\"\r\n              name=\"longitude\"\r\n              value={this.state.longitude}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"population\" className=\"col-sm-4 col-form-label\">\r\n            Population:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <input\r\n              onChange={this.handleFormChange}\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              id=\"population\"\r\n              placeholder=\"Enter Population\"\r\n              name=\"population\"\r\n              value={this.state.population}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <div className=\"col-sm-12\">\r\n            <button\r\n              id=\"addNewCity\"\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              onClick={this.handleFormSubmit}\r\n            >\r\n              Add New City\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <hr></hr>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCityForm;\r\n","import React from \"react\";\r\nimport \"../Accounts/Account.css\";\r\nimport \"./City.css\";\r\n\r\nfunction CommDisplay(props) {\r\n  return (\r\n    <div>\r\n      <div id=\"commOptions\" className=\"\">\r\n        <h5 className=\"panelTitle text-center\">Community Details</h5>\r\n\r\n        <label className=\"commDetailsLabel\">Most Northern City: </label>\r\n        <span id=\"mostNorth\" className=\"commDetailsValue\">\r\n          {\" \"}\r\n          {props.mostNorthernCity}\r\n        </span>\r\n        <br />\r\n        <label className=\"commDetailsLabel\">Most Southern City:</label>\r\n        <span id=\"mostSouth\" className=\"commDetailsValue\">\r\n          {\" \"}\r\n          {props.mostSouthernCity}\r\n        </span>\r\n        <br />\r\n        <label className=\"commDetailsLabel\">Total Population:</label>\r\n        <span id=\"totalPopulation\" className=\"commDetailsValue\">\r\n          {\" \"}\r\n          {props.commPopulation}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommDisplay;\r\n","export class City {\r\n  constructor(key, cityName, latitude, longitude, population) {\r\n    this.key = key;\r\n    this.cityName = cityName;\r\n    this.latitude = latitude;\r\n    this.longitude = longitude;\r\n    this.population = population;\r\n  }\r\n  show() {\r\n    return `Key: ${this.key}, City Name: ${this.cityName}, Latitude: ${this.latitude}, Longitude: ${this.longitude}, Population: ${this.population}`;\r\n  }\r\n  movedIn(numValue) {\r\n    this.population += numValue;\r\n    // console.log(this.population);\r\n  }\r\n  movedOut(numValue) {\r\n    this.population -= numValue;\r\n    // console.log(this.population);\r\n  }\r\n  howBig() {\r\n    if (this.population >= 1 && this.population <= 100) {\r\n      return \"Hamlet\";\r\n    }\r\n    if (this.population <= 1000) {\r\n      return \"Village\";\r\n    }\r\n    if (this.population <= 20000) {\r\n      return \"Town\";\r\n    }\r\n    if (this.population <= 100000) {\r\n      return \"Large Town\";\r\n    }\r\n    if (this.population > 100000) {\r\n      return \"City\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Community {\r\n  constructor() {\r\n    this.cityRoster = [];\r\n  }\r\n  createCity(key, cityName, latitude, longitude, population) {\r\n    let newCity = new City(key, cityName, latitude, longitude, population);\r\n    this.cityRoster.push(newCity);\r\n    return this.cityRoster;\r\n  }\r\n  whichSphere(city) {\r\n    if (city.latitude > 0) return \"Northern Hemishpere\";\r\n    if (city.latitude < 0) return \"Southern Hemishpere\";\r\n    return \"Equator\";\r\n  }\r\n  getMostSouthern(cityList) {\r\n    cityList.sort((a, b) => {\r\n      return a.latitude - b.latitude;\r\n    });\r\n    // console.log(cityList[0]);\r\n    return cityList[0];\r\n  }\r\n  getMostNorthern(cityList) {\r\n    cityList.sort((a, b) => {\r\n      return b.latitude - a.latitude;\r\n    });\r\n    // console.log(cityList[0]);\r\n    return cityList[0];\r\n  }\r\n  getPopulation(cityList) {\r\n    let totalPolulation = cityList.reduce((sum, city) => {\r\n      return sum + city.population;\r\n    }, 0);\r\n    // console.log(totalPolulation);\r\n    return totalPolulation;\r\n  }\r\n  deleteCity(cityKey) {\r\n    let newCityRoster = this.cityRoster.filter(city => {\r\n      return city.key !== cityKey;\r\n    });\r\n    this.cityRoster = newCityRoster;\r\n  }\r\n}\r\n","import { City } from \"./cityFunctions.js\";\r\n\r\nconst url = \"http://localhost:5000/\";\r\n// const newComm = new Community();\r\n\r\nconst cityFetchFunctions = {\r\n  async postData(url = \"\", data = {}) {\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrer: \"no-referrer\", // no-referrer, *client\r\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    });\r\n\r\n    const json = await response.json(); // parses JSON response into native JavaScript objects\r\n    json.status = response.status;\r\n    json.statusText = response.statusText;\r\n    return json;\r\n  },\r\n  async postToServer(newCity) {\r\n    let data = await this.postData(url + \"add\", newCity);\r\n    return data;\r\n  },\r\n  async updateServer(currentCity) {\r\n    let data = await this.postData(url + \"update\", currentCity);\r\n    return data;\r\n  },\r\n  async deleteFromServer(cityKey) {\r\n    let data = await this.postData(url + \"delete\", { key: cityKey });\r\n    return data;\r\n  },\r\n  async getCitiesOnServer(newComm) {\r\n    let data = await this.postData(url + \"all\");\r\n    // console.log(newComm.cityRoster);\r\n    if (data.length !== 0) {\r\n      newComm.cityRoster = data.map(\r\n        item =>\r\n          new City(\r\n            item.key,\r\n            item.cityName,\r\n            item.latitude,\r\n            item.longitude,\r\n            item.population\r\n          )\r\n      );\r\n      let keyArrays = newComm.cityRoster.map(itm => itm.key);\r\n      keyArrays.sort((a, b) => b - a);\r\n      let lastKey = keyArrays[0];\r\n      return lastKey;\r\n    }\r\n    let lastKey = 0;\r\n    return lastKey;\r\n  },\r\n  async clearServer() {\r\n    let data = await this.postData(url + \"clear\");\r\n    return data;\r\n  }\r\n};\r\n\r\nexport default cityFetchFunctions;\r\n","import React, { Fragment } from \"react\";\r\nimport cityFetchFunctions from \"./cityFetch\";\r\n\r\nclass CityCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cityCard: this.props.cityCard,\r\n      cardInput: \"\",\r\n      citySize: \"\",\r\n      cardErrorMessage: \"\"\r\n    };\r\n    this.handleCardInput = this.handleCardInput.bind(this);\r\n  }\r\n\r\n  handleCardInput(event) {\r\n    this.setState({ cardInput: event.target.value });\r\n  }\r\n\r\n  handleMovedInButton = event => {\r\n    event.preventDefault(event);\r\n    let movedInAmount = Number(this.state.cardInput);\r\n    // console.log(this.state.cardInput);\r\n    if (movedInAmount > 0) {\r\n      this.state.cityCard.movedIn(movedInAmount);\r\n      cityFetchFunctions.updateServer(this.state.cityCard);\r\n      const updatedMovedInCard = this.state.cityCard;\r\n      this.setState({\r\n        cityCard: updatedMovedInCard,\r\n        cardInput: \"\",\r\n        cardErrorMessage: \"\"\r\n      });\r\n      this.props.updateCityCard();\r\n      this.showCitySize();\r\n    } else {\r\n      this.setState({\r\n        cardInput: \"\",\r\n        cardErrorMessage: \"Enter a valid Moved In Number\"\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMovedOutButton = event => {\r\n    event.preventDefault(event);\r\n    let movedOutAmount = Number(this.state.cardInput);\r\n    if (movedOutAmount <= 0) {\r\n      this.setState({\r\n        cardInput: \"\",\r\n        cardErrorMessage: \"Enter a valid Moved Out Number\"\r\n      });\r\n      return;\r\n    } else if (movedOutAmount > this.state.cityCard.population) {\r\n      this.setState({\r\n        cardInput: \"\",\r\n        cardErrorMessage: \"Move Out value is larger than current population\"\r\n      });\r\n      return;\r\n    }\r\n    this.state.cityCard.movedOut(movedOutAmount);\r\n    cityFetchFunctions.updateServer(this.state.cityCard);\r\n    const updatedMovedOutCard = this.state.cityCard;\r\n    this.setState({\r\n      cityCard: updatedMovedOutCard,\r\n      cardInput: \"\",\r\n      cardErrorMessage: \"\"\r\n    });\r\n    this.props.updateCityCard();\r\n    this.showCitySize();\r\n  };\r\n\r\n  showCitySize = () => {\r\n    const howBig = this.state.cityCard.howBig();\r\n    this.setState({\r\n      citySize: `(${howBig})`\r\n    });\r\n  };\r\n\r\n  handleDeleteButton = () => {\r\n    this.props.deleteCityCard(this.props.cardKey);\r\n    cityFetchFunctions.deleteFromServer(this.props.cardKey);\r\n    const updatedCard = this.state.cityCard;\r\n    this.setState({\r\n      cityCard: updatedCard\r\n    });\r\n    this.props.updateCityCard();\r\n  };\r\n\r\n  render() {\r\n    let { cityName, latitude, longitude, population } = this.props.cityCard;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">{cityName}</div>\r\n          <div className=\"card-body\">\r\n            <div className=\"spacerBottom\">\r\n              <input\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Value\"\r\n                value={this.state.cardInput}\r\n                onChange={this.handleCardInput}\r\n                type=\"number\"\r\n              />\r\n            </div>\r\n            <button\r\n              className=\"movedIn btn btn-outline-primary\"\r\n              onClick={this.handleMovedInButton}\r\n            >\r\n              Moved In\r\n            </button>\r\n            <button\r\n              className=\"movedOut btn btn-outline-primary\"\r\n              onClick={this.handleMovedOutButton}\r\n            >\r\n              Moved Out\r\n            </button>\r\n            <button\r\n              className=\"deleteCardBtn btn btn-outline-danger\"\r\n              onClick={this.handleDeleteButton}\r\n            >\r\n              Delete\r\n            </button>\r\n            <div className=\"spacerTop\">\r\n              Latitude: {latitude} | Longitude: {longitude}\r\n            </div>\r\n            <div className=\"spacer\">\r\n              Current Population: {population} {this.state.citySize}\r\n            </div>\r\n            <div className=\"error spacerTop\">{this.state.cardErrorMessage}</div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityCard;\r\n","import React from \"react\";\r\nimport \"../Accounts/Account.css\";\r\nimport \"./City.css\";\r\nimport MsgDisplay from \"./MsgDisplay.js\";\r\nimport AddCityForm from \"./AddCityForm\";\r\nimport CommDisplay from \"./CommDisplay\";\r\nimport { Community } from \"./cityFunctions\";\r\nimport CityCard from \"./CityCard\";\r\nimport cityFetchFunctions from \"./cityFetch\";\r\n\r\nclass City extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      keyCounter: 0,\r\n      northMost: \" \",\r\n      southMost: \"\",\r\n      totalPopulation: 0,\r\n      serverDisplayMessage: \"...\"\r\n    };\r\n    this.cityController = new Community();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const newComm = new Community();\r\n    let cityCount;\r\n    let lastKey = await cityFetchFunctions.getCitiesOnServer(newComm);\r\n\r\n    if (newComm.cityRoster.length >= 1) {\r\n      cityCount = lastKey + 1;\r\n      this.setState({\r\n        keyCounter: cityCount,\r\n        serverDisplayMessage: \"Success: Last key found!\"\r\n      });\r\n    } else if (newComm.cityRoster.length === 0) {\r\n      this.setState({\r\n        serverDisplayMessage: `Server Running: Server is Empty`\r\n      });\r\n    } else {\r\n      this.setState({ serverDisplayMessage: `Server Error: No Key Found` });\r\n    }\r\n    this.cityController.cityRoster = newComm.cityRoster;\r\n    this.updateCities();\r\n  }\r\n\r\n  addReactCity = params => {\r\n    let cityCounter = this.state.keyCounter;\r\n    const { cityName, latitude, longitude, population } = params;\r\n    this.cityController.createCity(\r\n      cityCounter,\r\n      cityName,\r\n      latitude,\r\n      longitude,\r\n      Number(population)\r\n    );\r\n    console.log(this.cityController.cityRoster);\r\n    this.setState(newState => {\r\n      return {\r\n        keyCounter: newState.keyCounter + 1\r\n      };\r\n    });\r\n    cityFetchFunctions.postToServer(\r\n      this.cityController.cityRoster.filter(item => item.key === cityCounter)[0]\r\n    );\r\n    this.updateCities();\r\n  };\r\n\r\n  deleteReactCity = keyIndex => {\r\n    this.cityController.deleteCity(keyIndex);\r\n    console.log(this.cityController.cityRoster);\r\n    this.updateCities();\r\n  };\r\n\r\n  updateCities = () => {\r\n    if (this.cityController.cityRoster.length < 1) {\r\n      this.setState({ northMost: \"\", southMost: \"\", totalPopulation: 0 });\r\n      return;\r\n    }\r\n    const northMostCity = this.cityController.getMostNorthern(\r\n      this.cityController.cityRoster\r\n    );\r\n    const southMostCity = this.cityController.getMostSouthern(\r\n      this.cityController.cityRoster\r\n    );\r\n    const communityPopulation = this.cityController.getPopulation(\r\n      this.cityController.cityRoster\r\n    );\r\n    this.setState({\r\n      northMost: northMostCity.cityName,\r\n      southMost: southMostCity.cityName,\r\n      totalPopulation: communityPopulation\r\n    });\r\n  };\r\n\r\n  addCityCard = () => {\r\n    return this.cityController.cityRoster.map(city => {\r\n      return (\r\n        <CityCard\r\n          key={city.key}\r\n          cityCard={city}\r\n          cardName={city.cityName}\r\n          updateCityCard={this.updateCities}\r\n          deleteCityCard={this.deleteReactCity}\r\n          cardKey={city.key}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const card = this.addCityCard();\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"spacer\">Community Management Dashboard</h1>\r\n        <div id=\"wrapper\" className=\"container\">\r\n          <div className=\"row row-grid\">\r\n            <div className=\"col-md-6\">\r\n              <div id=\"leftPanel\" className=\"col-md-12\">\r\n                <h4 className=\"panelTitle\">City Roster</h4>\r\n                {card}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div id=\"rightPanel\" className=\"col-md-12\">\r\n                <h4 className=\"panelTitle\">Community Summary</h4>\r\n                <hr></hr>\r\n                <MsgDisplay message={this.state.serverDisplayMessage} />\r\n                <hr></hr>\r\n                <AddCityForm onSubmit={this.addReactCity} />\r\n                <CommDisplay\r\n                  mostNorthernCity={this.state.northMost}\r\n                  mostSouthernCity={this.state.southMost}\r\n                  commPopulation={this.state.totalPopulation}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default City;\r\n","export class ListNode {\r\n  constructor(subject, amount, forwardNode = null) {\r\n    this.subject = subject;\r\n    this.amount = amount;\r\n    this.forwardNode = forwardNode;\r\n  }\r\n\r\n  show() {\r\n    return `Subject: ${this.subject} and Amount: ${this.amount}`;\r\n  }\r\n}\r\n\r\nexport class LinkedList {\r\n  constructor() {\r\n    this.head = null;\r\n    this.current = null;\r\n  }\r\n\r\n  //Methods to Implement\r\n  //first\r\n  first = () => {\r\n    this.current = this.head;\r\n    return this.current;\r\n  };\r\n\r\n  //last\r\n  last = () => {\r\n    if (this.current.forwardNode === null) return this.current;\r\n    while (this.current.forwardNode !== null) {\r\n      this.current = this.current.forwardNode;\r\n    }\r\n    return this.current;\r\n  };\r\n\r\n  //next\r\n  next = () => {\r\n    if (this.current === null) return `List is empty`;\r\n    if (this.current.forwardNode === null) return `Single Item on the List`;\r\n    this.current = this.current.forwardNode;\r\n    return this.current;\r\n  };\r\n\r\n  //previous\r\n  previous = () => {\r\n    if (this.current === this.head) return `Single Item on the List`;\r\n    let previousNode = this.head;\r\n    while (\r\n      this.current !== previousNode.forwardNode &&\r\n      this.current !== this.head\r\n    ) {\r\n      previousNode = previousNode.forwardNode;\r\n    }\r\n    this.current = previousNode;\r\n    return this.current;\r\n  };\r\n\r\n  //insert\r\n  insert = (subject, amount) => {\r\n    let newNode = new ListNode(subject, amount);\r\n    //if list is empty - insert at begining\r\n    if (!this.head) {\r\n      this.head = newNode;\r\n      this.current = newNode;\r\n    } else {\r\n      newNode.forwardNode = this.current.forwardNode;\r\n      this.current.forwardNode = newNode;\r\n      this.current = newNode;\r\n    }\r\n    return this.current;\r\n  };\r\n\r\n  //delete\r\n  delete = () => {\r\n    // if (!this.head) return null; // List is empty\r\n    //If Only one item in the list\r\n    if (this.current === this.head) {\r\n      this.head = this.head.forwardNode;\r\n      this.current = this.head;\r\n      return null;\r\n    } else {\r\n      this.previous();\r\n      this.current.forwardNode = this.current.forwardNode.forwardNode;\r\n    }\r\n  };\r\n\r\n  //sumAmounts\r\n  sumAmounts = () => {\r\n    let sum = 0;\r\n    let node = this.head;\r\n    while (node) {\r\n      sum += Number(node.amount);\r\n      node = node.forwardNode;\r\n    }\r\n    return sum;\r\n  };\r\n}\r\n","import React, { Fragment, useState } from \"react\";\r\nimport \"../Accounts/Account.css\";\r\nimport \"./LinkedList.css\";\r\nimport { LinkedList } from \"./LinkedListFunctions.js\";\r\n\r\nlet myLinkedList = new LinkedList();\r\n\r\nconst LinkedListApp = () => {\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [current, setCurrent] = useState(\"\");\r\n  // let currentNode = myLinkedList.current;\r\n\r\n  const handleSubjectChange = event => {\r\n    setSubject(event.target.value);\r\n  };\r\n\r\n  const handleAmountChange = event => {\r\n    setAmount(event.target.value);\r\n  };\r\n\r\n  // Methods to Implement\r\n\r\n  //Handle Insert Button\r\n  const handleInsert = event => {\r\n    if (subject === \"\" || amount === \"\") return null;\r\n    myLinkedList.insert(subject, amount);\r\n    setSubject(\"\");\r\n    setAmount(\"\");\r\n    setCurrent(myLinkedList.current);\r\n  };\r\n\r\n  //Handle on Enter Event\r\n  const handleEnter = event => {\r\n    if (event.keyCode === 13) {\r\n      // event.preventDefault();\r\n      handleInsert();\r\n    }\r\n  };\r\n\r\n  //Handle Delete Button\r\n  const handleDelete = () => {\r\n    myLinkedList.delete();\r\n    setCurrent(myLinkedList.current);\r\n  };\r\n\r\n  //Handle First Button\r\n  const handleFirst = () => {\r\n    myLinkedList.first();\r\n    setCurrent(myLinkedList.current);\r\n  };\r\n\r\n  //Handle Last Button\r\n  const handleLast = () => {\r\n    myLinkedList.last();\r\n    setCurrent(myLinkedList.current);\r\n  };\r\n\r\n  //Handle Previous Button\r\n  const handlePrev = () => {\r\n    myLinkedList.previous();\r\n    setCurrent(myLinkedList.current);\r\n  };\r\n\r\n  //Handle Next Buttton\r\n  const handleNext = () => {\r\n    myLinkedList.next();\r\n    setCurrent(myLinkedList.current);\r\n  };\r\n\r\n  const listNodes = [];\r\n  let displayText = \"\";\r\n  let total = 0;\r\n  let counter = 1;\r\n  let newNode = myLinkedList.head;\r\n  while (newNode !== null) {\r\n    displayText = `${newNode.subject} : ${newNode.amount}`;\r\n    if (newNode === myLinkedList.current) {\r\n      listNodes.push(\r\n        <p className=\"currentNode\" key={counter}>\r\n          {displayText}\r\n        </p>\r\n      );\r\n    } else {\r\n      listNodes.push(\r\n        <p className=\"node\" key={counter}>\r\n          {displayText}\r\n        </p>\r\n      );\r\n    }\r\n    total = total + Number(newNode.amount);\r\n    newNode = newNode.forwardNode;\r\n    counter = counter + 1;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"spacer\">Welcome to Linked List App</h1>\r\n      <div id=\"wrapper\" className=\"container\">\r\n        <div className=\"row row-grid\">\r\n          <div id=\"leftPanel\" className=\"col-md-12\">\r\n            <h4 className=\"panelTitle\">Linked List Control</h4>\r\n            <hr />\r\n            <div id=\"form\">\r\n              <div className=\"form-group row\">\r\n                <label htmlFor=\"subject\" className=\"col-sm-4 col-form-label\">\r\n                  Subject:\r\n                </label>\r\n                <div className=\"col-sm-8\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"subject\"\r\n                    name=\"subject\"\r\n                    placeholder=\"Enter Subject Name\"\r\n                    value={subject}\r\n                    onChange={handleSubjectChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group row\">\r\n                <label htmlFor=\"amount\" className=\"col-sm-4 col-form-label\">\r\n                  Amount:\r\n                </label>\r\n                <div className=\"col-sm-8\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    id=\"amount\"\r\n                    name=\"amount\"\r\n                    placeholder=\"Enter an Amount\"\r\n                    value={amount}\r\n                    onChange={handleAmountChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group row\">\r\n                <label className=\"col-sm-4\"></label>\r\n                <div className=\"col-sm-8 left-align\">\r\n                  <button\r\n                    onClick={handleInsert}\r\n                    onKeyPress={handleEnter}\r\n                    id=\"insert\"\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\"\r\n                  >\r\n                    Insert\r\n                  </button>\r\n                  <button\r\n                    onClick={handleDelete}\r\n                    id=\"delete\"\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\"\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <div\r\n              id=\"currentNodeDisplay\"\r\n              className={myLinkedList.head ? null : \"hidden\"}\r\n            >\r\n              <h4 className=\"panelTitle\">Linked List Display</h4>\r\n              <p>\r\n                {current\r\n                  ? `Current Node: ${current.show()}`\r\n                  : \"No Current Node\"}\r\n              </p>\r\n\r\n              <button\r\n                id=\"first\"\r\n                onClick={handleFirst}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                <b>{\"<<\"}</b>\r\n              </button>\r\n              <button\r\n                id=\"prev\"\r\n                onClick={handlePrev}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                <b>{\"<\"}</b>\r\n              </button>\r\n              <button\r\n                id=\"next\"\r\n                onClick={handleNext}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                <b>{\">\"}</b>\r\n              </button>\r\n              <button\r\n                id=\"last\"\r\n                onClick={handleLast}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                <b>{\">>\"}</b>\r\n              </button>\r\n              <div id=\"nodes\" className=\"spacerTop\">\r\n                {listNodes}\r\n              </div>\r\n              <div id=\"total\" className=\"total\">\r\n                {myLinkedList.head ? `Total Amount: ${total}` : \"\"}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LinkedListApp;\r\n","import React from \"react\";\r\nimport \"./ThemeSettings.css\";\r\nimport \"../Accounts/Account.css\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\n\r\nclass ThemeApp extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h2 className=\"spacer\">Select Theme Settings</h2>\r\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Select Theme\">\r\n          <Dropdown.Item href=\"#/action-1\">Default Theme</Dropdown.Item>\r\n          <Dropdown.Item href=\"#/action-2\">Light Theme</Dropdown.Item>\r\n        </DropdownButton>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThemeApp;\r\n","import React, { useState } from \"react\";\r\n\r\nconst ThemeContext = React.createContext({\r\n  dark: false,\r\n  toggle: () => {}\r\n});\r\n\r\nexport function ThemeProvider(props) {\r\n  const [dark, setDark] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setDark(!dark);\r\n    window.localStorage.setItem(\"darkTheme\", !dark);\r\n  };\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{\r\n        dark,\r\n        toggle\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ThemeContext;\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Animation from \"./components/Animations/svgComponent\";\nimport Game from \"./components/Tictactoe/tictactoe.js\";\n// import { Square, Board } from \"./components/Tictactoe/tictactoe.js\";\nimport DefaultApp from \"./components/DefaultApp/DefaultApp.js\";\nimport AccountComp from \"./components/Accounts/Account.js\";\nimport City from \"./components/City/City.js\";\nimport LinkedListApp from \"./components/Lists/LinkedListApp.js\";\nimport ThemeApp from \"./components/Theme/ThemeSettings.js\";\nimport ThemeContext, { themes } from \"./components/Theme/ThemeContext.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      myState: \"Hover on menu icon to display App Name\",\n      currentIcon: \"Home\"\n    };\n  }\n\n  onMouseOver = evt => {\n    // console.log(evt.target.id);\n    this.setState({\n      myState: `${evt.target.id} Exercise`\n    });\n  };\n\n  onMouseOut = () => {\n    this.setState({\n      myState: \"Hover on menu icon to display App Name\"\n    });\n  };\n\n  onButtonClick = evt => {\n    // console.log(evt.target.id + \" Button Clicked\");\n    this.setState({\n      currentIcon: evt.target.id\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Animation\n          mouseOverEvent={this.onMouseOver}\n          mouseOutEvent={this.onMouseOut}\n          ButtonClicked={this.onButtonClick}\n        />\n        <header className=\"App-header\">\n          {this.state.currentIcon === \"Home\" && (\n            <DefaultApp myState={this.state.myState} />\n          )}\n          {this.state.currentIcon === \"Tictactoe\" && (\n            <Game className=\"active\" />\n          )}\n          {this.state.currentIcon === \"Accounts\" && <AccountComp />}\n          {this.state.currentIcon === \"Cities\" && <City />}\n          {this.state.currentIcon === \"Lists\" && <LinkedListApp />}\n          {this.state.currentIcon === \"Settings\" && <ThemeApp />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"./components/Theme/ThemeContext\";\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}